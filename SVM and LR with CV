{"cells":[{"cell_type":"markdown","metadata":{"id":"X3siO-WgSteo"},"source":["***DESCRIPTION OF PROJECT:***\n","\n","\n","* Include all Features\n","* Remove only Null values\n","* Do not remove outliers\n","* Perform cross-validation for SVR and LINEAR REGRESSION\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"33pqlLg1TeGB"},"source":["***SVR WITH CROSS VALIDATION***"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":566},"executionInfo":{"elapsed":13024,"status":"ok","timestamp":1680416673807,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"},"user_tz":-330},"id":"xVRfX5GxzrK4","outputId":"820810c6-6430-4a48-c9df-2d14272723f1"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-aab938cf-3f8d-41d4-9818-4d16f67f8fa9\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-aab938cf-3f8d-41d4-9818-4d16f67f8fa9\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving AQI_DATASET.csv to AQI_DATASET.csv\n","       City        Date   PM2.5    PM10     NO    NO2     NOx     NH3     CO  \\\n","0     Delhi  01-01-2015  313.22  607.98  69.16  36.39  110.59   33.85  15.20   \n","1     Delhi  02-01-2015  186.18  269.55  62.09  32.87   88.14   31.83   9.54   \n","2     Delhi  03-01-2015   87.18  131.90  25.73  30.31   47.95   69.55  10.61   \n","3     Delhi  04-01-2015  151.84  241.84  25.01  36.91   48.62  130.36  11.54   \n","4     Delhi  05-01-2015  146.60  219.13  14.01  34.92   38.25  122.88   9.20   \n","...     ...         ...     ...     ...    ...    ...     ...     ...    ...   \n","2004  Delhi  27-06-2020   39.80  155.94  10.88  21.46   22.47   31.43   0.87   \n","2005  Delhi  28-06-2020   59.52  308.65  12.67  21.60   23.86   29.27   0.94   \n","2006  Delhi  29-06-2020   44.86  184.12  10.50  21.57   21.94   27.97   0.88   \n","2007  Delhi  30-06-2020   39.80   91.98   5.99  17.96   15.44   28.48   0.84   \n","2008  Delhi  01-07-2020   54.01  128.66   6.33  21.05   16.81   29.06   0.97   \n","\n","        SO2     O3  Benzene  Toluene  Xylene    AQI AQI_Bucket  \n","0      9.25  41.68    14.36    24.86    9.84  472.0     Severe  \n","1      6.65  29.97    10.55    20.09    4.29  454.0     Severe  \n","2      2.65  19.71     3.91    10.23    1.99  143.0   Moderate  \n","3      4.63  25.36     4.26     9.71    3.34  319.0  Very Poor  \n","4      3.33  23.20     2.80     6.21    2.96  325.0  Very Poor  \n","...     ...    ...      ...      ...     ...    ...        ...  \n","2004  10.38  18.88     1.69    19.99    0.43  112.0   Moderate  \n","2005  10.70  18.05     1.71    25.13    1.74  196.0   Moderate  \n","2006  11.58  26.61     2.13    23.80    1.13  233.0       Poor  \n","2007  10.51  37.29     1.57    16.37    0.49  114.0   Moderate  \n","2008  11.15  29.73     2.03    23.57    0.65  101.0   Moderate  \n","\n","[2009 rows x 16 columns]\n"]}],"source":["import pandas as pd\n","import io\n","from google.colab import files\n","uploaded=files.upload()\n","df=pd.read_csv(io.BytesIO(uploaded[\"AQI_DATASET.csv\"]))\n","print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qAYqBKIEz95H"},"outputs":[],"source":["df = df.dropna()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1680416679859,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"},"user_tz":-330},"id":"1GjG-D1myaS-","outputId":"2fcaebb9-2a23-432b-ba31-abaf410c02bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["       City        Date   PM2.5    PM10     NO    NO2     NOx     NH3     CO  \\\n","0     Delhi  01-01-2015  313.22  607.98  69.16  36.39  110.59   33.85  15.20   \n","1     Delhi  02-01-2015  186.18  269.55  62.09  32.87   88.14   31.83   9.54   \n","2     Delhi  03-01-2015   87.18  131.90  25.73  30.31   47.95   69.55  10.61   \n","3     Delhi  04-01-2015  151.84  241.84  25.01  36.91   48.62  130.36  11.54   \n","4     Delhi  05-01-2015  146.60  219.13  14.01  34.92   38.25  122.88   9.20   \n","...     ...         ...     ...     ...    ...    ...     ...     ...    ...   \n","2004  Delhi  27-06-2020   39.80  155.94  10.88  21.46   22.47   31.43   0.87   \n","2005  Delhi  28-06-2020   59.52  308.65  12.67  21.60   23.86   29.27   0.94   \n","2006  Delhi  29-06-2020   44.86  184.12  10.50  21.57   21.94   27.97   0.88   \n","2007  Delhi  30-06-2020   39.80   91.98   5.99  17.96   15.44   28.48   0.84   \n","2008  Delhi  01-07-2020   54.01  128.66   6.33  21.05   16.81   29.06   0.97   \n","\n","        SO2     O3  Benzene  Toluene  Xylene    AQI AQI_Bucket  \n","0      9.25  41.68    14.36    24.86    9.84  472.0     Severe  \n","1      6.65  29.97    10.55    20.09    4.29  454.0     Severe  \n","2      2.65  19.71     3.91    10.23    1.99  143.0   Moderate  \n","3      4.63  25.36     4.26     9.71    3.34  319.0  Very Poor  \n","4      3.33  23.20     2.80     6.21    2.96  325.0  Very Poor  \n","...     ...    ...      ...      ...     ...    ...        ...  \n","2004  10.38  18.88     1.69    19.99    0.43  112.0   Moderate  \n","2005  10.70  18.05     1.71    25.13    1.74  196.0   Moderate  \n","2006  11.58  26.61     2.13    23.80    1.13  233.0       Poor  \n","2007  10.51  37.29     1.57    16.37    0.49  114.0   Moderate  \n","2008  11.15  29.73     2.03    23.57    0.65  101.0   Moderate  \n","\n","[1224 rows x 16 columns]\n"]}],"source":["print(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"elapsed":1831,"status":"ok","timestamp":1680416685455,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"},"user_tz":-330},"id":"IfkIwGVb0NOf","outputId":"ed942f05-d0a3-44fe-ccaf-7936e20a204d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import seaborn as sns\n","sns.boxplot(data=df)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"executionInfo":{"elapsed":1511,"status":"ok","timestamp":1680416688609,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"},"user_tz":-330},"id":"_EPobBh90acd","outputId":"f9da45ef-f2f0-4698-e9fb-58b15d2611e2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAisAAAGdCAYAAADT1TPdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABYQklEQVR4nO3de1xUZf4H8M8wyAyCg4ICgmCWlqKWhSnYblsriWSuF1RsWbU0/W2RZpqVu2VlGWaapUu5lQlbXkbL+3rJzEslmFGakpqZCQ4CBsGINSAzz+8P4yzDDJe5MHOG+bxfr/N6Mc9zLt+ZYeZ855znohBCCBARERHJlI+7AyAiIiJqDJMVIiIikjUmK0RERCRrTFaIiIhI1pisEBERkawxWSEiIiJZY7JCREREssZkhYiIiGTN190B2MNkMqGwsBDt2rWDQqFwdzhERETUDEIIXL58GREREfDxaf71Eo9MVgoLCxEVFeXuMIiIiMgOBQUF6NKlS7PX98hkpV27dgCuPVmNRuPmaIiIiKg59Ho9oqKipPN4c3lkslJ760ej0TBZISIi8jC2NuFgA1siIiKSNSYrREREJGtMVoiIiEjWmKwQERGRrDFZISIiIlljskJERESyxmSFiIiIZI3JChEREcmaTcmK0WjEs88+i27dusHf3x833HADXnzxRQghpHWEEJg3bx46d+4Mf39/JCQk4MyZM2b7KSsrQ2pqKjQaDdq3b48pU6agsrLSOc+oFcvJycGECROQk5Pj7lCIiIhcxqZk5ZVXXsFbb72Ff/3rXzh58iReeeUVLFq0CMuXL5fWWbRoEZYtW4YVK1bg8OHDCAgIQGJiIgwGg7ROamoq8vLysGfPHmzfvh0HDx7EtGnTnPesWiGDwYBly5ahpKQEy5cvN3s9iYiIWjOFqHtZpAn33XcfwsLCsHLlSqksOTkZ/v7++OCDDyCEQEREBGbPno0nnngCAFBRUYGwsDBkZmZi/PjxOHnyJGJiYnDkyBH0798fALBr1y7ce++9uHDhAiIiIpqMQ6/XIygoCBUVFV4z3H5WVhbWrl0LIQQUCgXuv/9+TJo0yd1hERERNZu952+brqwMGjQIe/fuxffffw8AOHbsGD7//HMkJSUBAM6dO4eioiIkJCRI2wQFBWHgwIHIzs4GAGRnZ6N9+/ZSogIACQkJ8PHxweHDh60et6qqCnq93mzxJjqdDlqtVrrdJoTA+vXrodPp3BwZERFRy7MpWXn66acxfvx49OzZE23atMGtt96KmTNnIjU1FQBQVFQEAAgLCzPbLiwsTKorKipCaGioWb2vry+Cg4OldepLT09HUFCQtERFRdkStkcTQiAjI6PBchsujBEREXkkm5KV9evXY/Xq1VizZg2+/vprZGVlYfHixcjKymqp+AAAc+fORUVFhbQUFBS06PHkpKCgALm5uTAajWblRqMRubm5XvVaEBGRd/K1ZeU5c+ZIV1cAoG/fvjh//jzS09MxadIkhIeHAwCKi4vRuXNnabvi4mL069cPABAeHo6SkhKz/dbU1KCsrEzavj6VSgWVSmVLqK1GVFQUYmNj8c0338BkMknlSqUSt956q1ddZSIiIu9k05WVX3/9FT4+5psolUrpJNqtWzeEh4dj7969Ur1er8fhw4cRHx8PAIiPj0d5eTlyc3OldT799FOYTCYMHDjQ7ifSWikUCqSlpUGhUDSrnIiIqLWxKVkZPnw4FixYgP/+97/46aefsGnTJrz22msYNWoUgGsn0JkzZ+Kll17C1q1bcfz4cUycOBEREREYOXIkAKBXr14YOnQopk6dii+//BJffPEFHn30UYwfP75ZPYG8UWRkJFJSUqTERKFQYNy4cXy9iIjIK9jUdfny5ct49tlnsWnTJpSUlCAiIgL3338/5s2bBz8/PwDXGn4+99xzePvtt1FeXo4//OEPePPNN3HjjTdK+ykrK8Ojjz6Kbdu2wcfHB8nJyVi2bBkCAwObFYc3dl02GAyYPHkySktL0bFjR6xcuRJqtdrdYRERETWbvedvm5IVufDGZAW4NoJtRkYG0tLSEBcX5+5wiIiIbGLv+dumBrbkXnFxcUxSiIjI63AiQyIiIpI1JitEREQka0xWiIiISNaYrHiQnJwcTJgwATk5Oe4OhYiIyGWYrHgIg8GAZcuWoaSkBMuXL4fBYHB3SERERC7BZMVDaLValJWVAQBKS0uh1WrdHBEREZFrMFnxADqdDlqtVpphWQiB9evXQ6fTuTkyIiKilsdkReaEEMjIyGiw3APH9CMiIrIJkxWZKygoQG5uLoxGo1m50WhEbm4uCgoK3BQZERGRazBZkbmoqCjExsZane26f//+iIqKclNkRERErsFkReYUCgXS0tKkGZebKiciImptmKx4gMjISKSkpEiJiUKhwLhx4xAREeHmyIiIiFoekxUPMXLkSOlvhUJh9piIiKg1Y7LiITZv3iz1/DGZTNi8ebN7AyIiInIRJiseoHaclbo4zgoREXkLJisyx3FWiIjI2zFZkTmOs0JERN6OyYrMcZwVIiLydkxWZI7jrBARkbdjsuIBOM4KERF5MyYrHiIlJQXBwcEAgJCQEKSkpLg5IiIiItdgsuIh1Go1ZsyYgdDQUEyfPh1qtdrdIREREbmEr7sDoOaLi4tDXFycu8MgIiJyKV5ZISIiIlljskJERESyxmSFiIiIZI3JChEREckakxUPkpOTgwkTJiAnJ8fdoRAREbkMkxUPYTAYsGzZMpSUlGD58uUwGAzuDomIiMglmKx4CK1Wi7KyMgBAaWkptFqtmyMiIiJyDZuSleuuuw4KhcJiSUtLA3Dt139aWhpCQkIQGBiI5ORkFBcXm+0jPz8fw4YNQ9u2bREaGoo5c+agpqbGec+oFdLpdNBqtRBCAACEEFi/fj10Op2bIyMiImp5NiUrR44cwcWLF6Vlz549AICxY8cCAB5//HFs27YNGzZswIEDB1BYWIjRo0dL2xuNRgwbNgzV1dU4dOgQsrKykJmZiXnz5jnxKbUuQghkZGQ0WF6bwBAREbVWCuHA2W7mzJnYvn07zpw5A71ej06dOmHNmjUYM2YMAODUqVPo1asXsrOzERcXh507d+K+++5DYWEhwsLCAAArVqzAU089hUuXLsHPz69Zx9Xr9QgKCkJFRQU0Go294XuE/Px8TJ06tcH6d955B9HR0S6MiIiIyD72nr/tbrNSXV2NDz74AJMnT4ZCoUBubi6uXr2KhIQEaZ2ePXsiOjoa2dnZAIDs7Gz07dtXSlQAIDExEXq9Hnl5eQ0eq6qqCnq93mzxFlFRUYiNjYWPj/lbpVQq0b9/f0RFRbkpMiIiItewO1nZvHkzysvL8cADDwAAioqK4Ofnh/bt25utFxYWhqKiImmduolKbX1tXUPS09MRFBQkLd50gq5tE6RQKJpVTkRE1NrYnaysXLkSSUlJiIiIcGY8Vs2dOxcVFRXSUlBQ0OLHlJPIyEikpKRIiYlCocC4ceNc8toTERG5m13Jyvnz5/HJJ5/goYceksrCw8NRXV2N8vJys3WLi4sRHh4urVO/d1Dt49p1rFGpVNBoNGaLt0lJSUFwcDAAICQkBCkpKW6OiIiIyDXsSlZWrVqF0NBQDBs2TCqLjY1FmzZtsHfvXqns9OnTyM/PR3x8PAAgPj4ex48fR0lJibTOnj17oNFoEBMTY+9z8ApqtRozZsxAaGgopk+fDrVa7e6QiIiIXMLm3kAmkwndunXD/fffj4ULF5rVPfzww9ixYwcyMzOh0Wgwffp0AMChQ4cAXOu63K9fP0RERGDRokUoKirChAkT8NBDD+Hll19udgze1BuIiIiotbD3/O1r64E++eQT5OfnY/LkyRZ1S5cuhY+PD5KTk1FVVYXExES8+eabUr1SqcT27dvx8MMPIz4+HgEBAZg0aRLmz59vaxhERETkJRwaZ8VdeGWFiIjI87h8nBUiIiIiV2CyQkRERLLGZIWIiIhkjckKERERyRqTFSIiIpI1JitEREQka0xWiIiISNaYrHiQnJwcTJgwATk5Oe4OhYiIyGWYrHgIg8GAxYsXo6SkBIsXL4bBYHB3SERERC7BZMVDrF69GpcvXwYAXL58GatXr3ZzRERERK7BZMUD6HQ6bNiwwaxsw4YN0Ol0boqIiIjIdZisyJwQAkuWLEH9KZwaKiciImptmKzIXH5+PvLy8qzW5eXlIT8/38URERERuRaTFSIiIpI1Jiu/k2u34OjoaPTp08dqXZ8+fRAdHe3iiIiIiFyLyQqudQtetmwZSkpKsHz5cll1C1YoFJg1axYUCoVF+ezZsy3KiYiIWhsmKwC0Wi3KysoAAKWlpdBqtW6OyFxkZCTGjh1rVjZ27FhERES4KSIiIiLX8fpkRafTQavVSr1qhBBYv3697LoFp6amol27dgAAjUaD1NRUN0dERETkGl6drAghkJGR0WC5nLoFq9VqPPHEEwgNDcXs2bOhVqvdHRIREZFL+Lo7AHcqKChAbm6uRbnRaERubi4KCgpk1YA1Li4OcXFx7g6DiIjIpbz6ykpUVBRiY2Ph42P+MiiVSvTv3x9RUVFuioyIiIhqeXWyolAokJaWZrWnjbVyd5Nr92oiIqKW5NXJCnCtp01KSoqUmCgUCowbN052PW3k3L2aiIioJXl9sgIAKSkpCA4OBgCEhIQgJSXFzRFZknv3aiIiopbCZAXXetrMmDEDoaGhmD59uux62nhK92oiIqKWwGTld3FxcXj//fdl19vGk7pXExERtQQmKzJX273aaDSaldftXk1ERNSaMVmRudru1fUpFAp2ryYiIq/AZEXmFAoFxowZY1EuhMCYMWNk172aiIjI2ZisyJwQAh9++KHVug0bNrDNChERtXpMVmSuoSkBALDNChEReQWbkxWdToe//e1vCAkJgb+/P/r27YuvvvpKqhdCYN68eejcuTP8/f2RkJCAM2fOmO2jrKwMqamp0Gg0aN++PaZMmYLKykrHn00r1KVLF2g0Gqt1Go0GXbp0cXFERERErmVTsvLLL7/gjjvuQJs2bbBz50589913WLJkCTp06CCts2jRIixbtgwrVqzA4cOHERAQgMTERLMRV1NTU5GXl4c9e/Zg+/btOHjwIKZNm+a8Z9WKXLhwAXq93mqdXq/HhQsXXBwRERGRaymEDY0enn76aXzxxRf47LPPrNYLIRAREYHZs2fjiSeeAABUVFQgLCwMmZmZGD9+PE6ePImYmBgcOXIE/fv3BwDs2rUL9957Ly5cuNCsYe71ej2CgoJQUVHR4FWH1kIIgX/+858Wt4IUCgViY2Px0ksvsZEtERF5BHvP3zZdWdm6dSv69++PsWPHIjQ0FLfeeiveeecdqf7cuXMoKipCQkKCVBYUFISBAwciOzsbAJCdnY327dtLiQoAJCQkwMfHB4cPH7Z63KqqKuj1erPFW9ROqlh/ZmgfHx9ZTrZIRETkbDYlKz/++CPeeust9OjRA7t378bDDz+MGTNmICsrCwBQVFQEAAgLCzPbLiwsTKorKipCaGioWb2vry+Cg4OldepLT09HUFCQtHjb2CKRkZEYP368WVlKSorsJlskIiJqCTYlKyaTCbfddhtefvll3HrrrZg2bRqmTp2KFStWtFR8AIC5c+eioqJCWryxB0xKSgpCQkIAAB07dpTlZItEREQtwaZkpXPnzoiJiTEr69WrF/Lz8wEA4eHhAIDi4mKzdYqLi6W68PBwlJSUmNXX1NSgrKxMWqc+lUoFjUZjtngbtVqNxMRE+Pj4YMiQIbKbbJGIiKil2JSs3HHHHTh9+rRZ2ffff4+uXbsCALp164bw8HDs3btXqtfr9Th8+DDi4+MBAPHx8SgvLzdrMPrpp5/CZDJh4MCBdj8RR+Xk5GDChAnIyclxWwyNMRgM2L17N0wmEz7++GOz3lVEREStmU3JyuOPP46cnBy8/PLL+OGHH7BmzRq8/fbbSEtLA3CtMejMmTPx0ksvYevWrTh+/DgmTpyIiIgIjBw5EsC1KzFDhw7F1KlT8eWXX+KLL77Ao48+ivHjx7utDYbBYMCyZctQUlKC5cuXyzIR0Gq1KCsrAwCUlpZCq9W6OSIiIiLXsClZuf3227Fp0yasXbsWffr0wYsvvojXX38dqamp0jpPPvkkpk+fjmnTpuH2229HZWUldu3aZXbbYvXq1ejZsycGDx6Me++9F3/4wx/w9ttvO+9Z2UjuiYBOp4NWq5WG1hdCYP369dDpdG6OjIiIqOXZNM6KXDhznBWdToepU6fCaDRKZb6+vnj77bcRGRnpaKgOqx1n5ejRo2YxKpVK9OvXDwsWLGD3ZSIi8gguGWeltRFCICMjo8FyOeRxtXMD1U1UAMBoNHJuICIi8gpenax4QiIQFRWF2NhYi3KFQoH+/ft73ZgzRETkfbw6WalNBOqPDqtUKmWTCCgUCowZM8aiXAiBMWPG8BYQERG1el6drNQOZV//hN9QuTsIIfDhhx9ajXHDhg2yuFVFRETUkrw6WQGuDWWfkpIiJQMKhQLjxo2TzVD2tbeq6iclQgjZ3KoiIiJqSV6frADXhrIPDg4GAISEhMhqKHtPuFVFRETUkpis4NpQ9jNmzEBoaCimT58uq6HsG7slJZdbVURERC3J190ByEVcXBzi4uLcHYZVkZGR6NmzJ/Ly8qSyXr16yeZWFRERUUvilRUPoNPpcPLkSbOykydPcgRbIiLyCkxWZK52gDprt3vkMnAdERFRS2KyInOeMHAdERFRS2KyInPsDURERN6OyYrM1fYGsjbOCnsDERGRN2Cy4gEiIyMREhJiVhYSEsLeQERE5BWYrHiAr7/+Gj///LNZ2aVLl/D111+7KSIiIiLXYbIicyaTCenp6Vbr0tPTYTKZXBwRERGRazFZkbkjR45Ar9dbrdPr9Thy5IiLIyIiInItJisy179/fyiVSqt1tT2CiIiIWjMmKzKn0+ksxlipZTQaOYotERG1ekxWZK52nBVrOM4KERF5AyYrMlc7zkr9QeF8fHw4zgoREXkFJisyIYSAwWCwuoSEhCA5Odls/TFjxiA4ONjq+pwviIiIWhOF8MAzm16vR1BQECoqKqDRaNwdjlMYDAaMGDHCKfvasmUL1Gq1U/ZFRETkLPaev3ll5Xc5OTmYMGECcnJy3B0KERER1cErK7h2VWPy5MkoLS1Fx44dsXLlSpdfmRBCoKqqqsF6g8GAlJQUAIBWq200PpVKxbYsREQkO/aev31bMCaPodVqUVZWBgAoLS2FVqvFpEmTXBqDQqFodoKkVqt5m4eIiLyG198G0ul00Gq1UqNUIQTWr1/P8UuIiIhkwquTFSEEMjIyGiz3wDtkRERErY5XJysFBQXIzc21GCHWaDQiNzcXBQUFboqMiIiIanl1slI7Omz9Addq59zh6LBERETu59XJSu3osPV7zjRUTkRERK5nU7Ly/PPPQ6FQmC09e/aU6g0GA9LS0hASEoLAwEAkJyejuLjYbB/5+fkYNmwY2rZti9DQUMyZMwc1NTXOeTZ2iIyMREpKipSYKBQKjBs3DhEREW6LiYiIiP7H5isrvXv3xsWLF6Xl888/l+oef/xxbNu2DRs2bMCBAwdQWFiI0aNHS/VGoxHDhg1DdXU1Dh06hKysLGRmZmLevHnOeTZ2SklJQWBgIAAgMDBQGs+EiIiI3M/mcVZ8fX0RHh5uUV5RUYGVK1dizZo1+POf/wwAWLVqFXr16oWcnBzExcXh448/xnfffYdPPvkEYWFh6NevH1588UU89dRTeP755+Hn5+f4MyIiIqJWxeYrK2fOnEFERASuv/56pKamIj8/HwCQm5uLq1evIiEhQVq3Z8+eiI6ORnZ2NgAgOzsbffv2RVhYmLROYmIi9Ho98vLyHH0udtNqtaisrAQAVFZWQqvVui0WIiIiMmdTsjJw4EBkZmZi165deOutt3Du3Dn88Y9/xOXLl1FUVAQ/Pz+0b9/ebJuwsDAUFRUBAIqKiswSldr62rqGVFVVQa/Xmy3OwkHhiIiI5M2mZCUpKQljx47FzTffjMTEROzYsQPl5eVYv359S8UHAEhPT0dQUJC0OKtLMQeFIyIikj+Hui63b98eN954I3744QeEh4ejuroa5eXlZusUFxdLbVzCw8MtegfVPrbWDqbW3LlzUVFRIS3OGqyNg8IRERHJn0PJSmVlJc6ePYvOnTsjNjYWbdq0wd69e6X606dPIz8/H/Hx8QCA+Ph4HD9+HCUlJdI6e/bsgUajQUxMTIPHUalU0Gg0ZoszcFA4IiIi+bMpWXniiSdw4MAB/PTTTzh06BBGjRoFpVKJ+++/H0FBQZgyZQpmzZqFffv2ITc3Fw8++CDi4+MRFxcHABgyZAhiYmIwYcIEHDt2DLt378YzzzyDtLQ0qFSqFnmCjeGgcERERPJnU7Jy4cIF3H///bjpppswbtw4hISEICcnB506dQIALF26FPfddx+Sk5Nx5513Ijw8HBs3bpS2VyqV2L59O5RKJeLj4/G3v/0NEydOxPz58537rGzAQeGIiIjkTSE8sBWpXq9HUFAQKioqnHJLyGAwYPLkySgtLUXHjh2xcuVKqNVqJ0TqPAaDASNGjAAAbNmyRXbxERERNcXe87dXzw1US61WY8aMGQgNDcX06dOZCBAREcmIzSPYtlZxcXFS2xoiIiKSD15ZISIiIlljsvK7nJwcTJgwATk5Oe4OhYiIiOpgsoJrjVeXLVuGkpISLF++HAaDwd0hERER0e+YrODaRIZlZWUAgNLSUk5kSEREJCNen6xwIkMiIiJ58+pkhRMZEhERyZ9XJyucyJCIiEj+vDpZ4USGRERE8ufVyQonMiQiIpI/r05WAE5kSEREJHden6wAQEpKCoKDgwEAISEhSElJcXNEREREVIvJCjiRIRERkZxxIsPfcSJDIiIieeKVFSIiIpI1JitEREQka0xWiIiISNaYrBAREZGsMVkhIiIiWWOy8rucnBxMmDABOTk57g6FiIiI6mCyAsBgMGDx4sUoKSnB4sWLYTAY3B0SERER/Y7JCoDVq1fj8uXLAIDLly9j9erVbo6IiIiIanl9sqLT6bB+/Xqzsg0bNkCn07kpIiIiIqrLq5MVIQSWLFnSYLkQwg1RERERUV1enazk5+cjLy/Pal1eXh7y8/NdHBERERHV59XJSlNXTnhlhYiIyP28OllRKBQO1RMREVHL8+pkJTo6Gr1797Za16dPH0RHR7s4IiIiIqrPq5MVhUKB2bNnW1xBaaiciIiIXM+rkxUAiIyMxNixY83Kxo4di4iICDdFRERERHV5fbICAGPGjJH+VigUZo+JiIjIvRxKVhYuXAiFQoGZM2dKZQaDAWlpaQgJCUFgYCCSk5NRXFxstl1+fj6GDRuGtm3bIjQ0FHPmzEFNTY0joThk8+bNZrd8Nm/e7LZYiIiIyJzdycqRI0fw73//GzfffLNZ+eOPP45t27Zhw4YNOHDgAAoLCzF69Gip3mg0YtiwYaiursahQ4eQlZWFzMxMzJs3z/5n4QCdTgetVit1UxZCYP369RzBloiISCbsSlYqKyuRmpqKd955Bx06dJDKKyoqsHLlSrz22mv485//jNjYWKxatQqHDh2SZjP++OOP8d133+GDDz5Av379kJSUhBdffBEZGRmorq52zrNqJiEEMjIyGiznOCtERETuZ1eykpaWhmHDhiEhIcGsPDc3F1evXjUr79mzJ6Kjo5GdnQ0AyM7ORt++fREWFiatk5iYCL1e3+BoslVVVdDr9WaLMxQUFCA3NxdGo9Gs3Gg0Ijc3FwUFBU45DhEREdnP5mRl3bp1+Prrr5Genm5RV1RUBD8/P7Rv396sPCwsDEVFRdI6dROV2vraOmvS09MRFBQkLVFRUbaGbVVUVBRiY2Ph42P+MiiVSvTv399pxyEiIiL72ZSsFBQU4LHHHsPq1auhVqtbKiYLc+fORUVFhbQ464qHQqFAWlqa1bq0tDSOs0JERCQDNiUrubm5KCkpwW233QZfX1/4+vriwIEDWLZsGXx9fREWFobq6mqUl5ebbVdcXIzw8HAAQHh4uEXvoNrHtevUp1KpoNFozBZniYyMxE033WRWdtNNN3GcFSIiIpmwKVkZPHgwjh8/jqNHj0pL//79kZqaKv3dpk0b7N27V9rm9OnTyM/PR3x8PAAgPj4ex48fR0lJibTOnj17oNFoEBMT46Sn1Xw6nQ4nT540K/vuu+/YG4iIiEgmfG1ZuV27dujTp49ZWUBAAEJCQqTyKVOmYNasWQgODoZGo8H06dMRHx+PuLg4AMCQIUMQExODCRMmYNGiRSgqKsIzzzyDtLQ0qFQqJz2t5hFCYMmSJVbrlixZgiVLlvBWEBERkZvZlKw0x9KlS+Hj44Pk5GRUVVUhMTERb775plSvVCqxfft2PPzww4iPj0dAQAAmTZqE+fPnOzuUJuXn5zfYAykvLw/5+fno2rWri6MiIiKiuhxOVvbv32/2WK1WIyMjw+r4JbW6du2KHTt2OHpohzU1jgrHWSEiInI/r54bqKlbPLwFRERE5H5enaxERUUhICDAal1gYCDHWSEiIpIBr05WLly4gCtXrlitq6ysxIULF1wcEREREdXn1clKVFRUgw1ou3btyisrREREMuDVyYrJZGpwNNwLFy7AZDK5OCIiIiKqz6uTlZ07dzaYkBiNRuzcudPFEREREVF9Xp2sJCUlWUxiWEupVCIpKcnFEREREVF9Xp2s+Pj4NDgfUVhYWIOJDBEREbmOV5+N8/PzUVhYaLWusLAQ+fn5Lo6IiIiI6vPqZIUj2BIREcmfVycrHMGWiIhI/rw6WYmMjHSonoiIiFqeVycru3btcqieiIiIWp5XJytJSUlQKpVW69h1mYiISB68OllRKpWYOXOm1brZs2c3mMgQERGR63h1sgIAQ4YMQceOHc3KOnXqhMGDB7spIiIiIqrL65MVAFi4cKHZ4/T0dDdFQkRERPUxWQHw8ccfN/qYiIiI3MfrkxWdTof169eblW3YsAE6nc5NEREREVFdXp2sCCGwZMmSBss5gi0REZH7eXWykp+fj7y8PKt1eXl5nBuIiIhIBrw6WeHcQERERPLn1ckK5wYiIiKSP69OVjg3EBERkfx5dbLCuYGIiIjkz6uTlaFDhzpUT0RERC3Pq5OVpsZS4VgrRERE7ufVyQp7AxEREcmfVycrJpPJoXoiIiJqeV6drJw4ccKheiIiImp5Xp2s9O3b16F6IiIiank2JStvvfUWbr75Zmg0Gmg0GsTHx2Pnzp1SvcFgQFpaGkJCQhAYGIjk5GQUFxeb7SM/Px/Dhg1D27ZtERoaijlz5qCmpsY5z8ZGXbt2hVqttlqnVqvRtWtXF0dERERE9dmUrHTp0gULFy5Ebm4uvvrqK/z5z3/GiBEjpPl1Hn/8cWzbtg0bNmzAgQMHUFhYiNGjR0vbG41GDBs2DNXV1Th06BCysrKQmZmJefPmOfdZ1SGEgMFgsLqcPXsWBoPB6nZ16+subHRLRETkWgrh4Nk3ODgYr776KsaMGYNOnTphzZo1GDNmDADg1KlT6NWrF7KzsxEXF4edO3fivvvuQ2FhIcLCwgAAK1aswFNPPYVLly7Bz8+vWcfU6/UICgpCRUUFNBpNo+saDAaMGDHCkadoZsuWLQ1ejWlJdZ+Hu2IgIiJyhC3n77rsbrNiNBqxbt06XLlyBfHx8cjNzcXVq1eRkJAgrdOzZ09ER0cjOzsbAJCdnY2+fftKiQoAJCYmQq/XNzj7MQBUVVVBr9ebLUREROQdfG3d4Pjx44iPj4fBYEBgYCA2bdqEmJgYHD16FH5+fmjfvr3Z+mFhYSgqKgIAFBUVmSUqtfW1dQ1JT0/HCy+8YGuoAACVSoUtW7Y0uk5WVhY2btwoPR43bhxSU1Mb3B8RERG5js3Jyk033YSjR4+ioqICH374ISZNmoQDBw60RGySuXPnYtasWdJjvV6PqKioZm2rUCiavGUyfvx4KVkJCQlBamqq02+zCCFQVVVl9/Z129Y01M7GFiqVirNKExGRR7A5WfHz80P37t0BALGxsThy5AjeeOMNpKSkoLq6GuXl5WZXV4qLixEeHg4ACA8Px5dffmm2v9reQrXrWKNSqVr0ikbdff/9739vkfYgVVVVTms7k5KS4vA+2O6FiIg8hcPjrJhMJlRVVSE2NhZt2rTB3r17pbrTp08jPz8f8fHxAID4+HgcP34cJSUl0jp79uyBRqNBTEyMo6E4xYABA9wdAhEREdVh05WVuXPnIikpCdHR0bh8+TLWrFmD/fv3Y/fu3QgKCsKUKVMwa9YsBAcHQ6PRYPr06YiPj0dcXBwAYMiQIYiJicGECROwaNEiFBUV4ZlnnkFaWppXtQVZkhAAldK2WzBCCFQbr/3tp4Rdt3CqjAKzP7li83ZERETuZFOyUlJSgokTJ+LixYsICgrCzTffjN27d+Oee+4BACxduhQ+Pj5ITk5GVVUVEhMT8eabb0rbK5VKbN++HQ8//DDi4+MREBCASZMmYf78+c59VjKnUiqg8rU12VBA3aZFwiEiIpI1m5KVlStXNlqvVquRkZGBjIyMBtfp2rUrduzYYcthiYiIyIt59dxAREREJH9MVoiIiEjWmKwQERGRrDFZISIiIlljskJERESyxmSFiIiIZI3JChEREckakxUiIiKSNSYrREREJGtMVoiIiEjWmKwQERGRrDFZISIiIlljskJERESyxmSFiIiIZI3JChEREckakxUiIiKSNSYrREREJGtMVoiIiEjWmKwQERGRrDFZISIiIlljskJERESyxmSFiIiIZI3JChEREckakxUiIiKSNSYrREREJGtMVoiIiEjWmKwQERGRrDFZISIiIlljskJERESyxmSFiIiIZI3JChEREcmaTclKeno6br/9drRr1w6hoaEYOXIkTp8+bbaOwWBAWloaQkJCEBgYiOTkZBQXF5utk5+fj2HDhqFt27YIDQ3FnDlzUFNT4/izISIiolbHpmTlwIEDSEtLQ05ODvbs2YOrV69iyJAhuHLlirTO448/jm3btmHDhg04cOAACgsLMXr0aKneaDRi2LBhqK6uxqFDh5CVlYXMzEzMmzfPec9KhoQQ0t9VNcJti7V4SJ5ycnIwYcIE5OTkuDsUIiK3UggHzlqXLl1CaGgoDhw4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jcnK71QqFZ577jmoVCp3h9Igxug8nhAnY3QeT4iTMTqPJ8TJGG3jkQ1siYiIyHvwygoRERHJGpMVIiIikjUmK0RERCRrTFaIiIic5KeffoJCocDRo0fdHYrNFAoFNm/e7O4wrPLoZOWBBx6AQqGAQqGAn58funfvjvnz56Ompgb79++HQqFAhw4dYDAYzLY7cuSItF2t/fv3Y8SIEejcuTMCAgLQr18/rF69uskYavdTd1m3bl2LxmowGPDAAw+gb9++8PX1xciRI63Gtn//ftx2221QqVTo3r07MjMzm3w+Tal9HgsXLjQr37x5s1mMRqMRS5cuRd++faFWq9GhQwckJSXhiy++cDiGlo5p48aNuOeee9CpUydoNBrEx8dj9+7dsouzJTQnxtr/1/Lycovtr7vuOrz++uvS4//7v//DDTfcAH9/f3Tq1AkjRozAqVOnWiT2oqIiTJ8+Hddffz1UKhWioqIwfPhw7N27V1rn0KFDuPfee9GhQweo1Wr07dsXr732GoxGY4vEdOnSJTz88MOIjo6GSqVCeHg4EhMTzd7L5sT0008/YcqUKejWrRv8/f1xww034LnnnkN1dXWLxF1QUIDJkycjIiICfn5+6Nq1Kx577DGUlpZK6zz//PPo2bMnAgIC0KFDByQkJODw4cNW91f3+0+hUCAkJARDhw7Ft99+2yLxO8ra93rd5fnnn3d3iGaMRiMGDRqE0aNHm5VXVFQgKioK//znP90UmfN4dLICAEOHDsXFixdx5swZzJ49G88//zxeffVVqb5du3bYtGmT2TYrV65EdHS0WdmhQ4dw880346OPPsK3336LBx98EBMnTsT27dubjGHVqlW4ePGitDSUPDgrVqPRCH9/f8yYMQMJCQlWj3Xu3DkMGzYMd999N44ePYqZM2fioYcecspJV61W45VXXsEvv/xitV4IgfHjx2P+/Pl47LHHcPLkSezfvx9RUVG46667WiRzd2ZMBw8exD333IMdO3YgNzcXd999N4YPH45vvvlGVnG2lKZitEVsbCxWrVqFkydPYvfu3RBCYMiQIU5PDn766SfExsbi008/xauvvorjx49j165duPvuu5GWlgYA2LRpE/70pz+hS5cu2LdvH06dOoXHHnsML730EsaPH2/zxGrNkZycjG+++QZZWVn4/vvvsXXrVtx1113SSb+5MZ06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\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","X= df.drop(['City', 'AQI_Bucket', 'AQI','Date'], axis= 1)\n","y= df['AQI']\n","sns.boxplot(data=X)"]},{"cell_type":"markdown","metadata":{"id":"GMQiRevlyBn4"},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P-yKj2Tv04vP"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,random_state=0)\n","from sklearn.preprocessing import StandardScaler\n","Scaler = StandardScaler()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Suol7Oc109Ox"},"outputs":[],"source":["scaled_X_train = Scaler.fit_transform(X_train)\n","scaled_X_test = Scaler.transform(X_test)"]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV"],"metadata":{"id":"eh_iUzhZYux7"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":118745,"status":"ok","timestamp":1680420374309,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"},"user_tz":-330},"id":"jA6sQlPkY6-v","outputId":"039f87ea-b416-48aa-f5c2-2cc1559bd8ac"},"outputs":[{"output_type":"stream","name":"stdout","text":["Best Parameters after tuning: {'C': 1, 'degree': 2, 'epsilon': 0, 'gamma': 'scale', 'kernel': 'linear'}\n","Best Accuracy after tuning: 0.8908786928128413\n"]}],"source":["from sklearn.svm import SVR\n","param_grid = {'C':[0.001,0.01,0.1,0.5,1],\n","             'kernel':['linear','rbf','poly'],\n","              'gamma':['scale','auto'],\n","              'degree':[2,3,4],\n","              'epsilon':[0,0.01,0.1,0.5,1,2]}\n","\n","              \n","from sklearn.model_selection import GridSearchCV\n","svr = SVR()\n","grid = GridSearchCV(svr,param_grid=param_grid)\n","grid.fit(scaled_X_train,y_train)\n","best_parameters = grid.best_params_\n","best_accuracy = grid.best_score_\n","\n","print('Best Parameters after tuning: {}'.format(best_parameters))\n","print('Best Accuracy after tuning: {}'.format(best_accuracy))\n","#https://www.yourdatateacher.com/2021/05/19/hyperparameter-tuning-grid-search-and-random-search/#:~:text=Grid%20search%20is%20the%20simplest,performance%20metrics%20using%20cross%2Dvalidation."]},{"cell_type":"markdown","metadata":{"id":"X03-Cy26UKd6"},"source":["***LINEAR REGRESSION WITH CROSS VALIDATION***"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S0yIciLbUqz5"},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,random_state=0)\n","from sklearn.preprocessing import StandardScaler\n","Scaler = StandardScaler()\n","scaled_X_train=Scaler.fit_transform(X_train)\n","scaled_X_test=Scaler.transform(X_test)"]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV"],"metadata":{"id":"-UlqpzDyYg7E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["------\n","\n"],"metadata":{"id":"pGyVjKQfaZtx"}},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","lin_reg = LinearRegression()\n","grid_search = GridSearchCV(estimator = rfe,\n","                           param_grid = hyper,\n","                           scoring = 'accuracy',\n","                           cv = folds,\n","                           verbose = 1,\n","                           return_train_score=True)\n","grid_search = grid_search.fit(scaled_X_train, y_train)\n","best_parameters = grid_search.best_params_\n","best_accuracy = grid_search.best_score_\n","\n","print('Best Parameters after tuning: {}'.format(best_parameters))\n","print('Best Accuracy after tuning: {}'.format(best_accuracy))"],"metadata":{"id":"xVHwqxfSomg9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["---"],"metadata":{"id":"7rLdQwVuak0Q"}},{"cell_type":"code","source":["from sklearn.ensemble import GradientBoostingRegressor\n","GBR = GradientBoostingRegressor()\n","parameters = {'learning_rate': [0.01,0.02],\n","                  'subsample'    : [0.9, 0.5],\n","                  'n_estimators' : [100,500],\n","                  'max_depth'    : [4,6]\n","                 }\n","\n","grid_GBR = GridSearchCV(estimator=GBR, param_grid = parameters, cv = 5, n_jobs=-1)\n","grid_GBR.fit(scaled_X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":117},"id":"8G0ShFQODysg","executionInfo":{"status":"ok","timestamp":1680425391189,"user_tz":-330,"elapsed":79483,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"}},"outputId":"6c87ea51-d94a-4ff6-eacb-de95b1cb9ea2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5, estimator=GradientBoostingRegressor(), n_jobs=-1,\n","             param_grid={'learning_rate': [0.01, 0.02], 'max_depth': [4, 6],\n","                         'n_estimators': [100, 500], 'subsample': [0.9, 0.5]})"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=GradientBoostingRegressor(), n_jobs=-1,\n","             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.02], &#x27;max_depth&#x27;: [4, 6],\n","                         &#x27;n_estimators&#x27;: [100, 500], &#x27;subsample&#x27;: [0.9, 0.5]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=GradientBoostingRegressor(), n_jobs=-1,\n","             param_grid={&#x27;learning_rate&#x27;: [0.01, 0.02], &#x27;max_depth&#x27;: [4, 6],\n","                         &#x27;n_estimators&#x27;: [100, 500], &#x27;subsample&#x27;: [0.9, 0.5]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["print(\"The best estimator across all serach params: \",grid_GBR.best_estimator_,\"\\n\")\n","print(\"The best score across all search params: \",grid_GBR.best_score_,\"\\n\")\n","print(\"The best parameters across all searcjed params: \",grid_GBR.best_params_,\"\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SpqTuAHiKa7L","executionInfo":{"status":"ok","timestamp":1680428728351,"user_tz":-330,"elapsed":550,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"}},"outputId":"e406fa82-d8d5-4fa1-87a4-dd5702e62c0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The best estimator across all serach params:  GradientBoostingRegressor(learning_rate=0.02, max_depth=4, n_estimators=500,\n","                          subsample=0.5) \n","\n","The best score across all search params:  0.9351638129961645 \n","\n","The best parameters across all searcjed params:  {'learning_rate': 0.02, 'max_depth': 4, 'n_estimators': 500, 'subsample': 0.5} \n","\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","from sklearn.linear_model import LinearRegression\n","lin_reg=LinearRegression()\n","parameters = {'copy_X':(True, True),'fit_intercept':(True, False)}\n","clf3 = GridSearchCV(lin_reg, parameters)\n","clf3.fit(scaled_X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":117},"id":"iIjc08OQXCNj","executionInfo":{"status":"ok","timestamp":1680428968150,"user_tz":-330,"elapsed":612,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"}},"outputId":"4e59bc02-513a-403b-e3c0-1a62959d2ca8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(estimator=LinearRegression(),\n","             param_grid={'copy_X': (True, True),\n","                         'fit_intercept': (True, False)})"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=LinearRegression(),\n","             param_grid={&#x27;copy_X&#x27;: (True, True),\n","                         &#x27;fit_intercept&#x27;: (True, False)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=LinearRegression(),\n","             param_grid={&#x27;copy_X&#x27;: (True, True),\n","                         &#x27;fit_intercept&#x27;: (True, False)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["print(\"The best estimator across all serach params: \",clf3.best_estimator_,\"\\n\")\n","print(\"The best score across all search params: \",clf3.best_score_,\"\\n\")\n","print(\"The best parameters across all searcjed params: \",clf3.best_params_,\"\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BX-MJs2_X3Qy","executionInfo":{"status":"ok","timestamp":1680429011653,"user_tz":-330,"elapsed":427,"user":{"displayName":"Sadhana S","userId":"01655571991976383281"}},"outputId":"db7d3be9-f07a-4130-b3c8-af7a441347fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The best estimator across all serach params:  LinearRegression() \n","\n","The best score across all search params:  0.8951704585802496 \n","\n","The best parameters across all searcjed params:  {'copy_X': True, 'fit_intercept': True} \n","\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNUHrGLnlIHXv/7xoDMlOdR"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}