{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Lny-OIOEkMM3RCgKfda09vDdyiGVMlk3","timestamp":1681180023160},{"file_id":"1Y73KP_3-JUeupTJeAVgJ6kNE5YTaSg9q","timestamp":1681142117396},{"file_id":"1uuLN1XEugfbsIAdStl1pVJ4K7qRIMVZr","timestamp":1681136821437},{"file_id":"1QZ9pP1lVhNvqdgd0iNdNnEqwG73d1gtc","timestamp":1678725350478}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["DESCRIPTION:\n","\n","Performing DTR on the dataset using cross validation.\n","\n","It includes all the features.\n","\n","Outliers were not removed but the null values were filled with mean of the corresponding column."],"metadata":{"id":"1iQkxJDJHu3c"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"2_rO3eAszQkA","executionInfo":{"status":"ok","timestamp":1681180099888,"user_tz":-330,"elapsed":50107,"user":{"displayName":"Shanthini Joshitha P","userId":"01617767882999409149"}},"outputId":"1fa46812-1b67-4c1a-8852-cd6e01abc53f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-6a9852d9-57d5-4b5f-82a5-cd5fd88bc02a\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-6a9852d9-57d5-4b5f-82a5-cd5fd88bc02a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving AQI_DATASET.csv to AQI_DATASET.csv\n"]}],"source":["import pandas as pd\n","import io\n","from google.colab import files\n","uploaded=files.upload()\n"]},{"cell_type":"code","source":["df=pd.read_csv(io.BytesIO(uploaded[\"AQI_DATASET.csv\"]))\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TSUb9MIQzU6f","executionInfo":{"status":"ok","timestamp":1681180099889,"user_tz":-330,"elapsed":7,"user":{"displayName":"Shanthini Joshitha P","userId":"01617767882999409149"}},"outputId":"9eae200e-6463-486f-aa38-0560a143d2fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       City        Date   PM2.5    PM10     NO    NO2     NOx     NH3     CO  \\\n","0     Delhi  01-01-2015  313.22  607.98  69.16  36.39  110.59   33.85  15.20   \n","1     Delhi  02-01-2015  186.18  269.55  62.09  32.87   88.14   31.83   9.54   \n","2     Delhi  03-01-2015   87.18  131.90  25.73  30.31   47.95   69.55  10.61   \n","3     Delhi  04-01-2015  151.84  241.84  25.01  36.91   48.62  130.36  11.54   \n","4     Delhi  05-01-2015  146.60  219.13  14.01  34.92   38.25  122.88   9.20   \n","...     ...         ...     ...     ...    ...    ...     ...     ...    ...   \n","2004  Delhi  27-06-2020   39.80  155.94  10.88  21.46   22.47   31.43   0.87   \n","2005  Delhi  28-06-2020   59.52  308.65  12.67  21.60   23.86   29.27   0.94   \n","2006  Delhi  29-06-2020   44.86  184.12  10.50  21.57   21.94   27.97   0.88   \n","2007  Delhi  30-06-2020   39.80   91.98   5.99  17.96   15.44   28.48   0.84   \n","2008  Delhi  01-07-2020   54.01  128.66   6.33  21.05   16.81   29.06   0.97   \n","\n","        SO2     O3  Benzene  Toluene  Xylene    AQI AQI_Bucket  \n","0      9.25  41.68    14.36    24.86    9.84  472.0     Severe  \n","1      6.65  29.97    10.55    20.09    4.29  454.0     Severe  \n","2      2.65  19.71     3.91    10.23    1.99  143.0   Moderate  \n","3      4.63  25.36     4.26     9.71    3.34  319.0  Very Poor  \n","4      3.33  23.20     2.80     6.21    2.96  325.0  Very Poor  \n","...     ...    ...      ...      ...     ...    ...        ...  \n","2004  10.38  18.88     1.69    19.99    0.43  112.0   Moderate  \n","2005  10.70  18.05     1.71    25.13    1.74  196.0   Moderate  \n","2006  11.58  26.61     2.13    23.80    1.13  233.0       Poor  \n","2007  10.51  37.29     1.57    16.37    0.49  114.0   Moderate  \n","2008  11.15  29.73     2.03    23.57    0.65  101.0   Moderate  \n","\n","[2009 rows x 16 columns]\n"]}]},{"cell_type":"code","source":["import seaborn as sns\n","X= df.drop(['City','AQI_Bucket','AQI','Date'], axis= 1)\n","y= df['AQI']\n","sns.boxplot(data=X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"J_4X4mAo7tcQ","executionInfo":{"status":"ok","timestamp":1681180114877,"user_tz":-330,"elapsed":2259,"user":{"displayName":"Shanthini Joshitha P","userId":"01617767882999409149"}},"outputId":"f34a51a7-281f-4f30-9995-9e923aed3cd5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":3},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["for column in X.columns:\n","  X[column]=X[column].fillna(X[column].mean())\n","print(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"96TiHSHLkp3Y","executionInfo":{"status":"ok","timestamp":1681180128771,"user_tz":-330,"elapsed":558,"user":{"displayName":"Shanthini Joshitha P","userId":"01617767882999409149"}},"outputId":"fee3d0ed-115f-46c5-c2e2-730e82ba48e9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       PM2.5    PM10     NO    NO2     NOx     NH3     CO    SO2     O3  \\\n","0     313.22  607.98  69.16  36.39  110.59   33.85  15.20   9.25  41.68   \n","1     186.18  269.55  62.09  32.87   88.14   31.83   9.54   6.65  29.97   \n","2      87.18  131.90  25.73  30.31   47.95   69.55  10.61   2.65  19.71   \n","3     151.84  241.84  25.01  36.91   48.62  130.36  11.54   4.63  25.36   \n","4     146.60  219.13  14.01  34.92   38.25  122.88   9.20   3.33  23.20   \n","...      ...     ...    ...    ...     ...     ...    ...    ...    ...   \n","2004   39.80  155.94  10.88  21.46   22.47   31.43   0.87  10.38  18.88   \n","2005   59.52  308.65  12.67  21.60   23.86   29.27   0.94  10.70  18.05   \n","2006   44.86  184.12  10.50  21.57   21.94   27.97   0.88  11.58  26.61   \n","2007   39.80   91.98   5.99  17.96   15.44   28.48   0.84  10.51  37.29   \n","2008   54.01  128.66   6.33  21.05   16.81   29.06   0.97  11.15  29.73   \n","\n","      Benzene  Toluene  Xylene  \n","0       14.36    24.86    9.84  \n","1       10.55    20.09    4.29  \n","2        3.91    10.23    1.99  \n","3        4.26     9.71    3.34  \n","4        2.80     6.21    2.96  \n","...       ...      ...     ...  \n","2004     1.69    19.99    0.43  \n","2005     1.71    25.13    1.74  \n","2006     2.13    23.80    1.13  \n","2007     1.57    16.37    0.49  \n","2008     2.03    23.57    0.65  \n","\n","[2009 rows x 12 columns]\n"]}]},{"cell_type":"code","source":["y=y.fillna(y.mean())\n","y"],"metadata":{"id":"uUR8nWX9kuHM","executionInfo":{"status":"ok","timestamp":1681180133017,"user_tz":-330,"elapsed":7,"user":{"displayName":"Shanthini Joshitha P","userId":"01617767882999409149"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c0e58e6d-fca6-4541-ccbf-17f5299ce386"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       472.0\n","1       454.0\n","2       143.0\n","3       319.0\n","4       325.0\n","        ...  \n","2004    112.0\n","2005    196.0\n","2006    233.0\n","2007    114.0\n","2008    101.0\n","Name: AQI, Length: 2009, dtype: float64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n","from sklearn.preprocessing import StandardScaler\n","Scaler = StandardScaler()"],"metadata":{"id":"SleXPjc2qIOV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scaled_X_train = Scaler.fit_transform(X_train)\n","scaled_X_test = Scaler.transform(X_test)"],"metadata":{"id":"FDSPOCatlZeG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV"],"metadata":{"id":"aLbcxSklnEzt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import GridSearchCV\n","\n","# Define Decision Tree Regressor model\n","model = DecisionTreeRegressor()\n","\n","# Define parameters for Grid Search\n","param_grid = {\n","    'max_depth': [3, 5, 7],\n","    'min_samples_split': [2, 5, 10],\n","    'min_samples_leaf': [1, 2, 4]\n","}\n","\n","# Perform Grid Search with 5-fold cross validation\n","grid_search = GridSearchCV(model, param_grid, cv=5)\n","\n","# Fit the model to the data\n","grid_search.fit(X, y)\n","\n","# Print the best parameters and score\n","print(\"Best parameters: \", grid_search.best_params_)\n","print(\"Best score: \", grid_search.best_score_)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bT9plBXl5YvR","executionInfo":{"status":"ok","timestamp":1681180142995,"user_tz":-330,"elapsed":888,"user":{"displayName":"Shanthini Joshitha P","userId":"01617767882999409149"}},"outputId":"7d084c72-ac55-4ad9-d37c-f47389726345"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Best parameters:  {'max_depth': 7, 'min_samples_leaf': 2, 'min_samples_split': 10}\n","Best score:  0.7928409354581063\n"]}]}]}